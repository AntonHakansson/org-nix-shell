#+title: Demo of =org-nix-shell=
#+property: header-args :exports both
#+property: header-args+ :nix-shell "nix-shell"

Load =org-nix-shell-mode= and then execute the src blocks.

#+name: nix-shell
#+begin_src nix :noweb yes
  { pkgs ? import <nixpkgs> {}, pythonPackages ? pkgs.python3Packages }:
  pkgs.mkShell {
    buildInputs = [
      pkgs.cowsay
      pythonPackages.sympy
      <<nix-c-dependencies>>
    ];
    shellHook = ''
      echo "Hello from shellHook!"
    '';
    MY_ENVIRONMENT_VAR = "Polyglot notebook in org-mode!";
  }
#+end_src

* Shell

#+begin_src sh :results output
  cowsay "hello from nix-shell"
#+end_src

#+begin_src sh :results output
  echo "$MY_ENVIRONMENT_VAR"
  eval "$shellHook" # run shellHook
  printf "\nNow show me nix-related environment variables:\n\n"
  env | grep "NIX_"
#+end_src

* Python

#+begin_src python :results drawer output
  from sympy import *
  x = symbols('x');
  expr = 10**x
  print("\\[ \\int" + latex(expr) + " = " + latex(integrate(expr)) + " \\]")
#+end_src

* C

#+name: nix-c-dependencies
#+begin_src nix
  pkgs.pkg-config
  pkgs.cairo
#+end_src

#+name: c-cairo-flags
#+begin_src sh
  pkg-config cairo --cflags --libs
#+end_src

#+headers: :flags (org-sbe "c-cairo-flags")
#+headers: :includes '(stdio.h cairo.h)
#+begin_src C :results file
  const char *filename = "rectangle.png";
  cairo_surface_t *surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 64, 64);
  cairo_t *cr = cairo_create(surface);
  cairo_scale(cr, 64, 64);

  cairo_set_line_width(cr, 0.1);
  cairo_set_source_rgb(cr, 1, 0, 0);
  cairo_rectangle(cr, 0.25, 0.25, 0.5, 0.5);
  cairo_stroke(cr);

  cairo_surface_write_to_png(surface, filename);
  cairo_destroy(cr);
  cairo_surface_destroy(surface);

  printf("%s", filename);
#+end_src

* Separate nix-shell
:PROPERTIES:
:header-args+: :nix-shell "nix-shell-fortune"
:END:

#+name: nix-shell-fortune
#+begin_src nix
  { pkgs ? import <nixpkgs> {} }:
  pkgs.mkShell {
    buildInputs = [
      pkgs.fortune
    ];
  }
#+end_src

#+begin_src sh :results output :exports both
  fortune
#+end_src

We can alwyas override the nix-shell per source block.
#+headers: :nix-shell "nix-shell"
#+begin_src sh :results output
  cowsay "hello from top-level nix-shell"
#+end_src

