#+html: <div align=center>
#+html: <h2 align=center>org-nix-shell</h2>
#+html: <p>Buffer-local nix-shell environment in org-mode.</p>
#+html: </div>

This package is experimental; expect bugs and breaking changes.

Use nix shells directly in org-mode and org-babel src blocks.
org-nix-shell works by loading a [[https://direnv.net/][direnv]] environment, constructed on demand, in an out-of-tree directory.
The package [[https://github.com/purcell/envrc][envrc]] does all the heavy lifting.

* Quickstart

#+begin_src org
  ,#+name: nix-shell   # required, but name is customizable
  ,#+begin_src nix
    { pkgs ? import <nixpkgs> {} }:
    pkgs.mkShell {
      buildInputs = [ pkgs.hello ];   # list dependencies for this org buffer
    }
  ,#+end_src

  ,#+begin_src sh
    hello   # use 'hello' dependency
  ,#+end_src
#+end_src

Before evaluating the src block load the specified nix shell with ~org-nix-shell-load-direnv~.
See [[file:demo.org][demo.org]] for more examples in Python and C.

* Installation
** Straight

#+begin_src elisp
  (use-package org-nix-shell
    :straight '(org-nix-shell
                :type git
                :host github
                :repo "AntonHakansson/org-nix-shell"))
#+end_src

** Nix

With ~emacsWithPackagesFromUsePackage~ you can do:
#+begin_src nix
  pkgs.emacsWithPackagesFromUsePackage {
    config = ./init.el;
    extraEmacsPackages = epkgs:
      [(epkgs.trivialBuild rec {
        pname = "org-nix-shell";
        version = "0.1.0";
        packageRequires = [ epkgs.envrc ];
        src = pkgs.fetchFromGitHub {
          owner = "AntonHakansson";
          repo = pname;
          rev = "v${version}";
          sha256 = "sha256-iBJSdnsJtZyeVKQREOU2PkjxaKkmBeftMTaRDQMGo7U=";
        };
      })];
  };
#+end_src

* Customization

=M-x customize-group org-nix-shell= to see available customizable variables.
